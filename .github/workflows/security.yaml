name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Run every Sunday at midnight

jobs:
  # Scan dependencies for vulnerabilities
  dependency-scan:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # Frontend dependency scanning
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run npm audit (frontend)
        working-directory: ./frontend
        run: npm audit --production
        continue-on-error: true  # Don't fail the build, but report issues
      
      # Backend dependency scanning
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run npm audit (backend)
        working-directory: ./backend
        run: npm audit --production
        continue-on-error: true  # Don't fail the build, but report issues

  # Scan code for secrets and credentials
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.11.0
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Scan Docker images for vulnerabilities
  docker-scan:
    name: Docker Image Scanning
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - uses: actions/checkout@v3
      
      # Build frontend image for scanning
      - name: Build frontend Docker image
        run: docker build -t rubyrokit-frontend:scan -f frontend/Dockerfile ./frontend
      
      # Scan frontend image with Trivy
      - name: Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rubyrokit-frontend:scan'
          format: 'table'
          exit-code: '0'  # Don't fail the build, but report issues
          severity: 'CRITICAL,HIGH'
      
      # Build backend image for scanning
      - name: Build backend Docker image
        run: docker build -t rubyrokit-backend:scan -f backend/Dockerfile ./backend
      
      # Scan backend image with Trivy
      - name: Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rubyrokit-backend:scan'
          format: 'table'
          exit-code: '0'  # Don't fail the build, but report issues
          severity: 'CRITICAL,HIGH'
