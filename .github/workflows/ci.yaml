name: RubyRokit CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Lint and type check the codebase
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Check Types - Frontend
        working-directory: ./frontend
        run: npm run tsc --noEmit
      
      - name: Check Types - Backend
        working-directory: ./backend
        run: npm run tsc --noEmit
      
      - name: Lint Frontend
        working-directory: ./frontend
        run: npm run lint
      
      - name: Lint Backend
        working-directory: ./backend
        run: npm run lint

  # Run tests for the backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      # Set up MongoDB for testing
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install Dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run Backend Tests
        working-directory: ./backend
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/rubyrokit_test

  # Run tests for the frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install Dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run Frontend Tests
        working-directory: ./frontend
        run: npm test -- --passWithNoTests
        env:
          CI: true

  # Build and push Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Extract branch name for tagging
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      
      # Build and push frontend image
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/frontend:${{ env.BRANCH_NAME }}
            ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
      
      # Build and push backend image
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend:${{ env.BRANCH_NAME }}
            ghcr.io/${{ github.repository }}/backend:${{ github.sha }}

  # Deploy to staging (only from develop branch)
  # This is commented out as deployment configuration will depend on your infrastructure
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
  #   
  #   steps:
  #     - name: Deploy to staging environment
  #       run: |
  #         echo "Deploying to staging environment..."
  #         # Add deployment scripts or commands here

  # Deploy to production (only from main branch)
  # This is commented out as deployment configuration will depend on your infrastructure
  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   
  #   steps:
  #     - name: Deploy to production environment
  #       run: |
  #         echo "Deploying to production environment..."
  #         # Add deployment scripts or commands here
